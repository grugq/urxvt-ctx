#! perl
use Data::Dumper;
### Easier to visualize data structs with dd.  "print Dumper($var);" to use.. ###
my %handlers;

sub msg {
   my ($self, $msg) = @_;

   my $overlay = $self->overlay (0, 0, $self->strwidth ($msg), 1);
   $overlay->set (0, 0, $msg);
   my $iow; $iow = urxvt::timer->new->after (1)->cb (sub {
      undef $overlay;
      undef $iow;
   });
}


sub handle_on_exec {
    my ($term, $line) = @_;

    print "handling exec()\n";
    $term->exec_async($line);
}

sub handle_on_menu {
    my ($term, $line) = @_;

    print "handling menu()\n";
}

sub handle_on_send {
    my ($term, $line) = @_;

    my $octets = $term->locale_encode($line);
    $term->tt_write($octets);
}

$handlers{exec} = \&handle_on_exec;
$handlers{menu} = \&handle_on_menu;
$handlers{send} = \&handle_on_send;

sub build_menu {
    my ($term, $popup, $fh, $selection) = @_;

    while (<$fh>) {
        # comment, blank or spaces
        next if (/^(#.*|\s*)$/);

        # /regex/ "title" cmd and args...
        if (/^(.*)\s+(".*")\s+(exec|send|menu)\s+(".*")/x) {
            my ($regex, $display, $cmd, $line) = ($1, $2, $3, $4);

            print "[$regex] [$display] [$cmd] [$line]\n";

            # test the $regex against the $selection ##XXX not working
            if ($selection !~ /$regex/ && $regex ne "MATCHALL" ) {
	        next;
	    }

            # prepare the cmd line for the handler
            my $cmdline = eval ( $line );

            # prepare the display string for the option
            my $title = eval ( $display );

            substr $title, 40, -1, "..." if 40 < length $title;

            $popup->add_button($title,
                sub {
                    $handlers{$cmd}->($term, $cmdline, $selection)
                }
            );
        }
        # dashes
        elsif ($_ =~ /^-+/) {
             $popup->add_separator;
        }
    }
}

sub on_start {
   my ($self) = @_;

   $self->{browser} = $self->x_resource ("urlLauncher") || "sensible-browser";

   $self->grab_button (3);

   ()
}

sub on_button_press {
   my ($self, $event) = @_;

   if ($event->{button} != 3) {
     return ();
   }

   my $popup = $self->popup ($event)
      or return 1;

   $popup->add_title ("Contextual Execution");

   # set the title {
   my $text = $self->selection;

   my $title = $text;
   $title =~ s/[\x00-\x1f\x80-\x9f]/Â·/g;
   substr $title, 40, -1, "..." if 40 < length $title;
   $popup->add_title ($title);
   $popup->add_separator;
   # } 

   # e.g.: ~/.Xresources URxvt.context-menu: ~/.urxvt.ctx-menu
   # $fname = $self->x_resource("context-menu");
   open(my $fh, "<", "table.txt") or die "well that didnt work: $!";

   build_menu($self, $popup, $fh, $text);

   $popup->show;

   return 1;
}

